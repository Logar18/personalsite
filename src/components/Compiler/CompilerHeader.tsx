import React from 'react'
import { SiTypescript, SiJava, SiReact, SiSpring } from 'react-icons/si'

const CompilerHeader = () => {
  return (
    <div className='flex-col justify-between mb-10'>
      <div className='flex'>
        <p className='text-6xl font-bold'>Compiler</p>
      </div>
      <div className='flex items-center mt-3'>
        <SiJava size={30}/>
        <SiSpring size={30} className='ml-2'/>
        <SiTypescript size={30} className='ml-2'/>
        <SiReact size={30} className='ml-2'/>
      </div>
      <div className='mt-10'>
        <div className=''>
          <h2 className='text-3xl font-bold mb-2'>About</h2>
          <p className='font-bold hover:cursor-pointer text-sky-600 mb-2' onClick={() => window.open("https://www.labouseur.com/courses/compilers/grammar.pdf")}>View Language Grammar</p>
          <p className='font-light'>
            This compiler takes language from the above grammar as source code and compiles it into executable machine code for a 6502 processor. On this page, you can explore
            some of the features of the compiler and gain insight into what processes are happening behind the scene. 
          </p>
        </div>
        <div className='flex-col mt-10'>
            <h2 className='text-3xl font-bold mb-2'>Advanced Results</h2>
            <p className='font-light'>
                Below is a virtual machine you can use to write code for the compiler. If the code you wrote was error free and compiled successfully, you should see some output 
                in the black box below the text editor window. Below that, you can see the results of each phase in the compilation process: the CST is generated by the Parser and 
                then passed to the Semantic Analyzer, which generates an Abstract Syntax tree, which is checked for type and scope. From there, the machine code is generated.
            </p>
        </div>
      </div>
    </div>
  )
}

export default CompilerHeader